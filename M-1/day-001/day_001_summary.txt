## Day 1 - VCS란? (강의 내용 외 개인적 견해를 정리한 문서)

## VCS == Version Control System 이론
 - 각종 문서 및 개발 소스 버전제어 및 변경 관리 시스템
 - 형상관리 시스템 및 개발 협업 관리 시스템으로도 칭함
 - 소스 코드에 대한 변경 이력 또는 코딩 플로우를 파악하기 위해 주로 사용함
 - 협업에 있어서도 월등한 강점을 가진다. 소스 관리와 협업을 돕는 Github 등이 대표적인 예
 - 각자 따로 한 파일에 작업하더라도 브랜치를 분리하여 충돌 없이 작업이 가능하다

## VCS 사용에 따른 목적
 - 개발 소스코드 버전 및 변경의 수월한 관리
 - 개발 소스코드 스냅샷 및 백업 관리
 - 팀 단위의 편리한 협업 개발
 - 개발 소스코드 배포 자동화의 관리
   (DevOps에서는 CD/CI 라고 칭함, Github의 경우에는 Github Actions를 이용하여 Push가 들어올 경우 자동으로 서버에 업로드하여 빌드되어 배포되도록 자동화가 가능함)
 - 언제 어떤 코드를 작성하였는지 확인이 용이함에 따라 코드를 효율적으로 관리할 수 있음

## 서버에 소스코드를 배포하여 서비스를 띄우는 이유
 - 개발 환경과 서빙 환경을 분리하기 위함
 - 효율적인 전비와 유리한 네트워크 환경, 빠른 하드웨어 구성으로 보다 양질의 서비스를 제공할 수 있음
 - 보안적인 면에서 유리함 (기타 네트워크 공격에 보다 안전함)

## VCS의 종류
 - Git
    :: 전 세계적으로 가장 많이 사용되는 무료 오픈소스 VCS임
    :: 로컬 저장소와 서버 저장소를 모두 제공하는 분산 저장소 모델 제공
    :: 소스코드 제어 속도가 빠르고 효율적이며 성능이 우수함

 - CVS & SVN(Sub Version)
    :: CVS는 전통적으로 많이 사용되어 온 클라이언트 서버 기반의 무료 오픈소스 VCS임
    :: SVN은 CVS의 개선판임
    :: SVN은 클라이언트-서버 저장소 모델을 기반으로 한 VCS 시스템임
    :: SVN은 TortoiseSVN과 같은 사용이 용이한 GUI 도구가 제공됨
    :: SVN은 Git 이전에 가장 보편적으로 사용되던 VCS 시스템임

 - TFS(Team Foundation Server) & VSTS(Visual Studio Team Service)
    :: TFS는 Microsoft에서 제공하던 사용 ALM(Application Lifecycle Management - 어플리케이션 생명주기 관리) 도구임
    :: TFS는 ALM와 VCS의 기능을 모두 제공함
    :: VSTS는 분산 클라이언트 - 서버 저장소 모델을 기반으로 한 버전제어 도구임
    :: VSTS는 5인 이하로 사용할 경우 무료로 제공됨

## Git 소개 및 설치
 - 소스코드를 효과적으로 관리하기 위하여 개발된 분산형 버전관리 시스템
 - Github와는 다른 별개의 소프트웨어이다.
 - Github는 git 프레임워크에 기반한 플랫폼이다.
 - git --version => git version 2.39.2 (Apple Git-143)

## Git을 이용한 개발 시나리오
 1. 출근 후 repository에 있는 내역(이전 근무자가 작업한 내용)을 먼저 가져와 (git pull) 내 로컬 환경에 반영한다.
 2. 다른 사람이 작업해둔 변경된 내용을 git commit 내역을 통해 확인한다.
 3. 개발 업무를 진행한다.
 4. 퇴근 전 혹은 한 Subject가 종결되었을때, git commit을 통해서 내가 작업한 코드를 문제가 없는지 확인한 뒤 repository에 git push한다.
 5. 다음 담당자가 와서 1번부터 반복된다. 이를 통해 여러명이 하나의 코드로 작업하더라도 이어서 협업이 가능한것이다.

## "서버 기반 VCS" vs "분산형 VCS"
 - Centralized versioin control system == 중앙화된 버전관리 시스템
 - Distributed version control system == 분산화된 버전관리 시스템

## VSCode 설치 및 활용
 - VSCode == Visual Studio Code의 약자
 - VSCode는 IDE의 한 종류로, Microsoft에서 개발됨
 - 타 에디터나 IDE에 비하여 가볍게 움직이고 확장성이 좋아 범용적으로 사용됨

## 프로그래밍 언어의 종류 I
 - 기계어 (Assembly) - 기계나 컴퓨터가 이해하기 위한 Low-Level 언어
 - 프로그래밍 언어 - 사람이 읽고 이해하기 편한 High-level 언어. Complie 과정을 거쳐 기계어로 변환됨

## 프로그래밍 언어의 종류 II
 - Compile 언어 - C, C++, C#, Java 등 빌드 또는 컴파일 과정을 요하는 언어를 "컴파일 언어"라고 칭함
 - Interpreting 언어 - HTML, CSS, Javascript, Python, PHP, SQL 등 빌드 또는 컴파일이 필요 없이 곧바로 실행 가능한 언어를 "인터프리터 언어"라고 칭함
   Line by Line 방식이 적용됨. 한줄 한줄 읽어 실시간으로 변환시키며 실행시키는 개념. 개발 속도가 빠르고 편한 대신 퍼포먼스가 컴파일 언어에 비해 떨어짐.

