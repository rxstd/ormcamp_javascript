## Day 1 - VCS란? (강의 내용 외 개인적 견해를 정리한 문서)

## VCS == Version Control System 이론
 - 각종 문서 및 개발 소스 버전제어 및 변경 관리 시스템
 - 형상관리 시스템 및 개발 협업 관리 시스템으로도 칭함
 - 소스 코드에 대한 변경 이력 또는 코딩 플로우를 파악하기 위해 주로 사용함
 - 협업에 있어서도 월등한 강점을 가진다. 소스 관리와 협업을 돕는 Github 등이 대표적인 예
 - 각자 따로 한 파일에 작업하더라도 브랜치를 분리하여 충돌 없이 작업이 가능하다

## VCS 사용에 따른 목적
 - 개발 소스코드 버전 및 변경의 수월한 관리
 - 개발 소스코드 스냅샷 및 백업 관리
 - 팀 단위의 편리한 협업 개발
 - 개발 소스코드 배포 자동화의 관리
   (DevOps에서는 CD/CI 라고 칭함, Github의 경우에는 Github Actions를 이용하여 Push가 들어올 경우 자동으로 서버에 업로드하여 빌드되어 배포되도록 자동화가 가능함)
 - 언제 어떤 코드를 작성하였는지 확인이 용이함에 따라 코드를 효율적으로 관리할 수 있음

## 서버에 소스코드를 배포하여 서비스를 띄우는 이유
 - 개발 환경과 서빙 환경을 분리하기 위함
 - 효율적인 전비와 유리한 네트워크 환경, 빠른 하드웨어 구성으로 보다 양질의 서비스를 제공할 수 있음
 - 보안적인 면에서 유리함 (기타 네트워크 공격에 보다 안전함)

## VCS의 종류
 - Git
    :: 전 세계적으로 가장 많이 사용되는 무료 오픈소스 VCS임
    :: 로컬 저장소와 서버 저장소를 모두 제공하는 분산 저장소 모델 제공
    :: 소스코드 제어 속도가 빠르고 효율적이며 성능이 우수함

 - CVS & SVN(Sub Version)
    :: CVS는 전통적으로 많이 사용되어 온 클라이언트 서버 기반의 무료 오픈소스 VCS임
    :: SVN은 CVS의 개선판임
    :: SVN은 클라이언트-서버 저장소 모델을 기반으로 한 VCS 시스템임
    :: SVN은 TortoiseSVN과 같은 사용이 용이한 GUI 툴이 제공됨
    :: SVN은 Git 이전에 가장 보편적으로 사용되던 VCS 시스템임

 - TFS(Team Foundation Server) & VSTS(Visual Studio Team Service)
    :: TFS는 Microsoft에서 제공하던 사용 ALM(Application Lifecycle Management) 툴임
    :: TFS는 ALM & VCS 기능을 모두 제공함
    :: VSTS는 분산 클라이언트 - 서버 저장소 모델을 기반으로 한 버전제어 툴임
    :: VSTS는 5인 이하로 사용할 경우 무료로 제공됨

#### 점심시간 ####